<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python中的函数]]></title>
    <url>%2F2017%2F11%2F10%2FpythonBase5%2F</url>
    <content type="text"><![CDATA[python中的函数 函数的特性 功能性 隐藏细节 避免编写重复的代码roundround可以设置保留一个浮点数小数点后几位 round(a, x) x即保留的位数(会四舍五入)在python shell中可以使用help()函数来查找python相关内置函数的使用文档如果想要打印python之禅的话可以使用 import this 然后回车python函数中可以没有值传入 在函数体内可以使用return关键字， 如果没有，那么默认是返回Nonepython递归默认次数为995次，不过可以自定义(sys.setrecursionlimit(1000000))123456789 def add(x, y): result = x + y return result # 如果不加，就会返回None def toPrint(code): print(code)add(2, 3)toPrint("I love Python") 1234567891011 def add(x, y): result = x + y return result # 如果没有return，就会返回None# 返回多个值，可以直接return a, b用逗号隔开, 这样返回的是一个元组 def toPrint(code): print(code)add(2, 3)toPrint("I love Python") 另一个代码实例 123456789def damage(skill, skill2): damage = skill * 3 damage2 = skill2 * 2 + 10 return damage1, damage2skill_damage, skill2_damage = damage(3, 6)print(skill_damage, skill2_damage)# 9 22 序列解包 12345x, y, z = 1, 2, 3print(x, y, z)# 1 2 3x, y = y, x# 2 1 3 在函数定义时传入的参数一般叫做形式参数，而调用的时候传入的参数叫实际参数关键字参数 123456 def add(x, y): # x, y即为形参 result = x + y return resultc = add(y=3, x=2) # 传入的即为关键字参数(这样代码的可读性更高) 默认参数12345678def print_your_info(name, gender, age, school): print('我叫' + name) print('我今年' + str(age) + '岁') print('' + gender + '的') print('我在' + school + '读书')print_your_info('biubiubiu', 'gay', 19, '秋名山小学')# 可以在函数传参的时候直接赋值，这样在调用的时候可以不用传入，会使用默认赋予的参数值# 必须参数必须放在默认参数之前]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python正则表达式]]></title>
    <url>%2F2017%2F11%2F05%2FPythonBase7%2F</url>
    <content type="text"><![CDATA[python正则表表达式 正则表达式是一个特殊的字符序列， 目的是检测一个字符串是否与我们设定的字符序列相匹配 快速检索文本替换一些文本 1234567import rea = 'c|c++|java|c#|python|javascript'r = re.findall('python', a)if len(r) &gt; 0: print('it's true') 1234567import rea = 'asewasasjgkaskjgkjasg7s5sad6'r = re.findall('\d', a)print(a)# 7 5 6 一定不要死记硬背正则表达式元字符表，可以根据业务需求进行查询 正则表达式元字符速查表 1234567# 找出中间字符为a或者f的单词import res = 'abc, acc, adc, aec, afc, ahc'r = re.findall('a[cf]c', s) # 出现在中括号里面的字符是或的关系 \d =&gt; [0-9] [^0-9]非数字字符# r = re.findall('a[^cf]c', s) # 匹配中间字符不是c或者f的单词print(r) \w =&gt; [A-Za-z0-9—_] 1234567import rea = 'python 1111java2342php'r = re.findall('[a-z]&#123;3,6&#125;', a)print(r)# ['python', 'java', 'php'] python在正则匹配的时候一般倾向于贪婪模式，即使满足条件，也会尽量匹配的多，直至超出规则范围 在规则的最后面加上？号即为非贪婪模式123456789101112131415161718# 数量词# * 匹配0次或者无限多次# + 匹配1次或者无限多次# ? 匹配0次或者1次# ^ 从开头开始匹配# $ 从末尾开始匹配import rea = 'pytho111python222pythonn4'r = re.findall('python*', a)# r = re.findall('python+', a)# r = re.findall('python?', a)print(r)# ['pytho', 'python', 'pythonn']# ['python', 'pythonn']# ['pytho', 'python', 'python--- 边界匹配 1234567891011import re qq = '101' # qq = '100001' # qq = '1000000001' r = re.findall('\d&#123;4, 8&#125;', qq) # r = re.findall('^\d&#123;4, 8&#125;$', qq) print(r) # [] # ['100001'] # [] ()和[]的关系 在中括号里面的字符是或关系，而在小括号里面的是且关系 12345import rea = 'PythonPythonPythonPythonPythonPython'r = re.findall('(Python)&#123;3&#125;', a)print(r) python正则表达式详细教程 1234567import relanguage = 'PythonC#\nJavaPHP'r = re.findall('', languagem re.I | re.s)print(r)# ['c#\n'] re.sub(pattern, repl, string, count=0, flags=0) 用于替换字符串中的匹配项 1234567891011 import re phoneNum = '12312-45345-567'# 删除字符串中的注释num = re.sub(r'#.*$*', phone)print('电话号码是', num)# 删除非数字(-)的字符串num = re.sub(r'\D', "", phoneNum)print("电话号码是：", num) 12345678910import re# 将匹配的数字乘于 2def double(matched): value = int(matched.group('value')) return str(value * 2) s = 'A23G4HFD567' print(re.sub('(?P&lt;value&gt;\d+)', double, s)) # A46G8HFD1134 以上部分例子来自菜鸟教程，详细请移步 12345678910111213s = 'a5c23421d86'def convert(value): matched = value.group() if int(matched) &gt;= 6: return '9' else: return '0'r = re.sub('\d', convert, s)print(r)# a0c00000d90 match和search函数 match从字符串的第一个字符开始匹配，如果不符合条件，返回None 123456789101112import res = '83c72d1d8r67'r = re.match('\d', s)print(r.span())r1 = re.search('\d', s)print(r1.group())r2 = re.findall('\d', s)print(r2)# (0, 1)# 8# ['8', '3', '7', '2', '1', '8', '6', '7'] search和match的另外一些使用场景 123456789import res = 'life is short, i use python'r = re.search('life.*python', s)r1 = re.search('life(.*)python', s)print(r.group())print(r1.group(1))# life is short, i use python# r1 =&gt; is short, i use group函数的用法 12345678910111213import res = 'life is short, i use python, i love python'r = re.search('life(.*)python(.*python)', s)print(r.group(0))print(r.group(1))print(r.group(2))print(r.groups())# life is short, i use python, i love python# is short, i use# , i love# ('is short, i use', ', i love')]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python面向对象]]></title>
    <url>%2F2017%2F11%2F04%2FPythonBase6%2F</url>
    <content type="text"><![CDATA[面向对象最核心的是类和对象 类在命名的时候一般首字母大写(MyGirlfrend) 在类的内部我们可以定义变量，函数。 123456class Student(): name = '' age = 0 def print_info(): pass 在python中， 类的实例化直接用 比如 student = Student()来实现，无需new 这个关键字 调用类里面的方法可以这样：student.print_info() 在类中定义函数一般在传参的括号里加上 self 如果要在类中定义的函数中引用类中定义的变量，必须用self关键字， 比如self.name 类最基本的作用：封装，所以一般不要把函数调用放到类的内部 方法和函数的区别 方法一般是设计层面说法函数一般是面向过程的一种概念访问实例变量一般要用self. 当类被实例化以后，他就变成了一个具体的对象10. 123def __init__(): # 构造函数 passa 当我们实例化一个对象的时候，会自动调用类里面的构造函数 构造函数不能强制返回一个字符串 一般在构造函数中初始化对象的属性 类变量和实例变量 类变量就是定义在类中，但是在函数体之外的变量。通常是不用self.变量名赋值的变量。它对于所有实例化的对象中是公用的实例变量就是定义在方法中的变量， 使用self绑定倒实例上的变量， 只是对当前实例起作用类变量的访问一般都是用类名.类变量来访问实例变量在类的内部用self.实例变量访问，在类的外部用对象名.实例变量访问实例变量的形式对类变量重新赋值以后，类变量的值不会随之变化实例变量对每一个对象都是不可见的，每一个对象拥有可能不同的值 self与实例方法 python中类的方法中有一个额外的第一个参数self,在调用的时候不必为这个参数赋值(显胜于隐)self代表当前对象的地址构造函数其实就是一个特殊的实例方法，只是调用的方式的不同在类中的函数中访问类变量可以直接使用class.变量名 来访问(class两边带双下划线)在类中的函数中访问类变量也可以使用类名.变量名 来访问 12345678910111213141516171819class Student(): sum = 0 # name = '' # age = 0 def __init__(self, name, age): # 构造函数 # 初始化对象 self.name = name self.age = age self.__class__.sum += 1 print('当前班级学生总数为：' + str(self.__class__.sum)) @classmethod # 定义类方法(装饰器) def plus_sum(cls): pass @staticmethod # 静态方法 def add(x, y): pass 类方法的作用就是操作和类相关的变量 静态方法的内部同样可以访问类变量 最好不要直接对类变量进行赋值，而是应该暴露一个方法，用该方法操作类变量 在python中如果要私有一个方法，那么可以在方法名前面加上双下划线 虽然”score”是定义了一个私有成员变量，但是如果这样设置student.score = 1, 也是可以的 因为这样相当于新添加了一个 私有成员变量 如果想要访问类的私有变量可以这样做：单下划线+类名+双下划线+变量名 类的继承 一个模块最好只写一个类 123456789101112from c6 import peopleclass Student(people): sum = 0 def __init__(self, name, age): self.name = name self.age = age self.__score = 0 self.__class__.sum += 1 def do_homework(self): print('english homework') 12345678class Human(): sum = 0 def __init__(self, name, age): self.name = name self.age = age def get_name(self): print(self.name) 1234567891011121314151617181920from c6 import Humanclass Student(Human): # sum = 0 # def __init__(self, school, name, age): # self.name = name self.school = school Human.__init__(self, name, age) # self必须传入，否则会报错， 这里被当作了一个普通方法的调用，所以要加 # self.age = age # self.__score = 0 # self.__class__.sum += 1 def do_homework(self): print('english homework') student1 = Student() print(student1.sum) # 0 python可以多继承 在设计类的过程中， 主线一般是单一继承的， 但是如果要添加新的功能，可以使用多继承这种设计通常叫Mixin在设计类的过程中，应该优先考虑多继承，而不是单一的太过复杂的继承关系 12345678910class Chinese(): def do_chinese(self): print('it's so difficult')class English(): def do english(self): print('it's so easy')class Student(Chinese, English): pass super关键字 super接收两个参数 super(子类名, self).init(name, age) init带双下划线如果子类和父类的函数名重名，那么会优先调用子类的函数子类调用父类的方法，同样用super关键字super()的好处是可以避免直接使用父类的名字，主要用于多继承在python2中： 12345678910111213class Base(object): def __init__(self): print "Base created"class ChildA(Base): def __init__(self): Base.__init__(self)class ChildB(Base): def __init__(self): super(ChildB, self).__init__()print ChildA(), ChildB() 在python3中: 12345678910111213class Base(object): def __init__(self): print("Base created")class ChildA(Base): def __init__(self): Base.__init__(self)class ChildB(Base): def __init__(self): super().__init__()print(ChildA(), ChildB())]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python包、模块、函数和作用域]]></title>
    <url>%2F2017%2F11%2F02%2FPythonBase4%2F</url>
    <content type="text"><![CDATA[python中的包 包中包含模块，模块中包含类，类中包含函数和变量 一般一个文件夹可以默认为一个包 如果想要一个文件夹变成python的一个包，那么该文件夹下应该包含init.py，这个文件本身也算一个模块init模块的名字和文件夹的名字同名 导入模块 我们应该更多的考虑模块复用的方法，因为很多时候一个模块的功能是要被大量使用的，可以通过import关键字来导入一定要先引入，再使用！也可以用as关键字来将命名空间和模块命名成一个单独的变量，比如 import scrapy.requests as rq 那么我们使用requests的时候就可以用rq来代替了也可以这样: from scrapy import requests可以通过from xxx import *导入所有代码示例 1__all__ = ["a", "b"] # a b就是想要被用*导入的模块 同时引入多个模块 from xxx import a, b, c如果要倒入很多的方法或者变量之类的, 要换行隔开，在第一行的末尾加上一个反斜杠，否则会报错，或者加一个括号也可以无论导入的是模块，变量还是方法，都会运行init.py可以在init.py中定义all, 这样就可以通过 from x import * 导入x包下制定的模块(init和all左右都自带双下划线)包和模块是不会被重复的导入的要避免循环导入]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python分支、循环、条件与枚举]]></title>
    <url>%2F2017%2F10%2F18%2FpythonBase3%2F</url>
    <content type="text"><![CDATA[表达式的概念 表达式(Expression)是运算符(operator)和操作数(operand)所构成的序列 且(and)运算优先级大于或(or)运算 改变优先级可以使用括号(和数学基本概念是一样的0.0) 流程控制语句 if 123myMood = Trueif myMood: print('go to school') if else 12345myMood = Trueif myMood: print('go to school')else: print('嘿嘿嘿哈') python建议用两个单词，中间加下划线，来命名 an example 1234567891011user_account = "xiaoming"user_password = "20150910"print("please input your account:")account = input()print("please input your password")password = input()if account == user_account and password == user_password: print("success")else: print("fail") 在pylint中，只要不在函数和类中的变量，都会被他认为是一个常量 pass是在没有进一步的逻辑的时候使用，阻止程序报错 如果函数层级太多，可以把其中的一部分逻辑提取成一个函数，减少代码的层级 python中不需要太多的括号之类的，一般都是用缩进来决定逻辑的优先级 an example: 12345678910a = input()print("a is" + a)if a == 1: print("apple")elif a == 2: print("banana")elif a == 3: print("orange")else: print("QAQ") python中没有switch这个用法 input接收的是一个字符串循环语句 while循环主要是用于递归 for循环主要是用来遍历/循环 序列或者集合，字典 123a = [1, 2, 3, 4, 5, 6]for x in a: print(x) 打印子列表的话,可以嵌套一层循环 1234a = [[1,2,3,4,5,6], (100, 200)]for x in a: for b in x: print(b) for同样可以和else进行搭配使用， else内的逻辑一般是列表循环完的时候执行 break强行终止循环 continue直接进行下一步的逻辑 以下是示例 1234567 a = [1,2,3] for x in a: if x == 2: break print(x)# 1 123456 a = [1,2,3] for x in a: if x == 2: continue print(x)# 1 3 for和range 代码实例 123for x in range(0, 10): print(x)# 0 1 2 3 4 5 6 7 8 9 range(a, b) a为起始数字，而b为偏移量， 即总共有多少数字代码示例2 123for x in range(0, 10, 2): print(x) # 0 2 4 6 8 代码示例3 123for x in range(0,10,2): print(x, end=' | ')# 0 | 2 | 4 | 6 | 8 代码示例4 123for x in range(10, 0, -2): print(x, end=' | ')# 10 | 8 | 4 | 6 | 2 代码示例4 12345a = [1,2,3,4,5,6,7,8]for x in range(0, len(a), 2): print(a[i], end=' | ')# 1 | 3 | 5 | 7 1234a = [1,2,3,4,5,6,7,8]b = a[0:len(a):2]print(b)# [1, 3, 5, 7]]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python变量与运算符]]></title>
    <url>%2F2017%2F10%2F13%2FPythonBase2%2F</url>
    <content type="text"><![CDATA[变量与运算符运算符 int str tuple（不可改变）值类型list set dict (可变) 引用类型id函数(显示某一个变量在内存中的地址)变量的内存地址是16进制的字符串是不可改变的，但是通过+号运算符的话，两个字符串相加，成为一个新的字符串，那么就不违反字符串不可改变的规则// 是整除的意思余数使用 % 号次方用 ** 来计算is 和 == 的区别是 == 是比较两个变量的值， 而is是比较两个变量的身份是否相等(比较两个变量的内存地址)运算符归纳总结python中的isinstance函数是用来判断变量的类型的isinstance(a, str)，str位置可以接受元组的类型python中不存在常量, 因为他没有机制去阻止我们修改，但是为了防止pylint报警告， 会将常量的字母都大写 运算符优先级 元组和列表的区别1. 元组不可变，列表可变。 2. 往列表中添加元素可以使用append函数， 例如 123c = [1, 2, 3]c.append(4)c =&gt; [1, 2, 3, 4] 3. 访问元组中的列表或者列表中的列表或者元组中的元组中的元素可以参考二维数组。 4. 列表与列表和元组和元组之间可以做比较，都是从内部第一个元素开始作比较，以此类推。 5. 一个整数(0为False), 浮点数，列表，元组， 字典默认为True,一个空(&apos;&apos;)默认为False,空列表，元组为False 6. 如果[] or [1] 他默认返回True的， and默认返回false 7. 1 and 2 默认返回大的那个， 1 or 2 返回1(因为他从第一个元素开始检索，只要碰到为真的，那就返回真的那个元素) 8. 局部变量不会覆盖全局变量 字典的成员运算符 字典的成员运算时通过键值对(key-value)中的key来进行运算。]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python数据类型]]></title>
    <url>%2F2017%2F07%2F12%2FPythonBase%2F</url>
    <content type="text"><![CDATA[类型的重要概念 布尔类型属于Number类型。字符串和元组是不可变的， 而列表是可变的。元组中只有一个元素的，等于括号不存在，比如。(“hello”) = “hello”如果想要表示只有一个元素的元组，那么就要这样，比如(1,)多一个逗号。 集合(set)的相关操作1. 集合是无序的，所以不能yong&quot;[0]&quot;这样的操作 2. 集合是不重复的 3. 集合也是可以用len函数来计算长度的 4. 集合可以用&quot;-&quot;来求两个集合的差值， “&amp;”来求交集，&quot;|&quot;求并集 字典的相关操作(key-value键值对是其最基本的概念) 通过key来访问value, 字典不能有相同的key, 如果有，会自动删除前面重复的key以及他的value数字1和字符串1会被识别为两个不同的key 变量和运算符 命名要优雅， 可读性要高系统关键字不能出现在变量名中,比如and, if]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自用atom插件及相关介绍]]></title>
    <url>%2F2017%2F05%2F12%2FatomPackage%2F</url>
    <content type="text"><![CDATA[activate-power-mode 能够让你的代码飞起来！可以像老师写板书一样飞舞粉笔灰(0_0) atom-beautify可以格式化基本上你见过的任何的代码(包括SQL文件) atom-clock就是在编辑器右下角加一个显示时间的东东 atom-bracket-highlight 高亮成对的括号让你不会再找不到另一半! atom-ternjs 补全Node.js代码!补全JQuery代码!补全Angular代码!补全ES6代码段！ atom-djangodjango语法支持，代码段提示 atom-python-run在atom编辑器中运行python代码，而不是命令行中 autocomplete-python-jedipython补全(使用jedi) autoclose-html自动闭合html标签 autocomplete-paths自动补全文件路径 pigments高亮显示对应的颜色RGB minimap不解释！！ minimap-pigments在代码地图中高亮显示RGB颜色 emmet快速生成html代码div.hello (Tab)=&gt; 1&lt;div class="hello"&gt;&lt;/div&gt; highlight-selected高亮显示选择的单词，标签 linter语法检查(可安装对应的检查工具)linter-eslintlinter-csslintlinter-tslint react-snippetsreact代码段提示 platformio-ide-terminal在atom中嵌入一个终端 atom-wx微信语法支持 language-babel支持graphql, jsx等(react开发者必备) json-colorer彩色化json(看起来更直观) regex-railroad-diagram图形化正则表达式(据说很赞，详细使用参见github) MagicPython更好的python语法高亮支持 filesize在编辑器左下角显示当前文件大小]]></content>
      <categories>
        <category>Atom编辑器</category>
      </categories>
      <tags>
        <tag>Editor</tag>
      </tags>
  </entry>
</search>
