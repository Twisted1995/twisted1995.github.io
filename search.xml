<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python包、模块、函数和作用域]]></title>
    <url>%2F2017%2F11%2F02%2FPythonBase4%2F</url>
    <content type="text"><![CDATA[python中的包 包中包含模块，模块中包含类，类中包含函数和变量 一般一个文件夹可以默认为一个包 如果想要一个文件夹变成python的一个包，那么该文件夹下应该包含init.py，这个文件本身也算一个模块init模块的名字和文件夹的名字同名 import导入模块 我们应该更多的考虑模块复用的方法，因为很多时候一个模块的功能是要被大量使用的，可以通过import关键字来导入一定要先引入，再使用！也可以用as关键字来将命名空间和模块命名成一个单独的变量，比如 import scrapy.requests as rq 那么我们使用requests的时候就可以用rq来代替了也可以这样: from scrapy import requests]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python分支、循环、条件与枚举]]></title>
    <url>%2F2017%2F10%2F18%2FpythonBase3%2F</url>
    <content type="text"><![CDATA[表达式的概念 表达式(Expression)是运算符(operator)和操作数(operand)所构成的序列 且(and)运算优先级大于或(or)运算 改变优先级可以使用括号(和数学基本概念是一样的0.0) 流程控制语句 if 123myMood = Trueif myMood: print('go to school') if else 12345myMood = Trueif myMood: print('go to school')else: print('嘿嘿嘿哈') python建议用两个单词，中间加下划线，来命名 an example 1234567891011user_account = "xiaoming"user_password = "20150910"print("please input your account:")account = input()print("please input your password")password = input()if account == user_account and password == user_password: print("success")else: print("fail") 在pylint中，只要不在函数和类中的变量，都会被他认为是一个常量 pass是在没有进一步的逻辑的时候使用，阻止程序报错 如果函数层级太多，可以把其中的一部分逻辑提取成一个函数，减少代码的层级 python中不需要太多的括号之类的，一般都是用缩进来决定逻辑的优先级 an example: 12345678910a = input()print("a is" + a)if a == 1: print("apple")elif a == 2: print("banana")elif a == 3: print("orange")else: print("QAQ") python中没有switch这个用法 input接收的是一个字符串循环语句 while循环主要是用于递归 for循环主要是用来遍历/循环 序列或者集合，字典 123a = [1, 2, 3, 4, 5, 6]for x in a: print(x) 打印子列表的话,可以嵌套一层循环 1234a = [[1,2,3,4,5,6], (100, 200)]for x in a: for b in x: print(b) for同样可以和else进行搭配使用， else内的逻辑一般是列表循环完的时候执行 break强行终止循环 continue直接进行下一步的逻辑 以下是示例 1234567 a = [1,2,3] for x in a: if x == 2: break print(x)# 1 123456 a = [1,2,3] for x in a: if x == 2: continue print(x)# 1 3 for和range 代码实例 123for x in range(0, 10): print(x)# 0 1 2 3 4 5 6 7 8 9 range(a, b) a为起始数字，而b为偏移量， 即总共有多少数字代码示例2 123for x in range(0, 10, 2): print(x) # 0 2 4 6 8 代码示例3 123for x in range(0,10,2): print(x, end=' | ')# 0 | 2 | 4 | 6 | 8 代码示例4 123for x in range(10, 0, -2): print(x, end=' | ')# 10 | 8 | 4 | 6 | 2 代码示例4 12345a = [1,2,3,4,5,6,7,8]for x in range(0, len(a), 2): print(a[i], end=' | ')# 1 | 3 | 5 | 7 1234a = [1,2,3,4,5,6,7,8]b = a[0:len(a):2]print(b)# [1, 3, 5, 7]]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python变量与运算符]]></title>
    <url>%2F2017%2F10%2F13%2FPythonBase2%2F</url>
    <content type="text"><![CDATA[变量与运算符运算符 int str tuple（不可改变）值类型list set dict (可变) 引用类型id函数(显示某一个变量在内存中的地址)变量的内存地址是16进制的字符串是不可改变的，但是通过+号运算符的话，两个字符串相加，成为一个新的字符串，那么就不违反字符串不可改变的规则// 是整除的意思余数使用 % 号次方用 ** 来计算is 和 == 的区别是 == 是比较两个变量的值， 而is是比较两个变量的身份是否相等(比较两个变量的内存地址)运算符归纳总结python中的isinstance函数是用来判断变量的类型的isinstance(a, str)，str位置可以接受元组的类型python中不存在常量, 因为他没有机制去阻止我们修改，但是为了防止pylint报警告， 会将常量的字母都大写 运算符优先级 元组和列表的区别1. 元组不可变，列表可变。 2. 往列表中添加元素可以使用append函数， 例如 123c = [1, 2, 3]c.append(4)c =&gt; [1, 2, 3, 4] 3. 访问元组中的列表或者列表中的列表或者元组中的元组中的元素可以参考二维数组。 4. 列表与列表和元组和元组之间可以做比较，都是从内部第一个元素开始作比较，以此类推。 5. 一个整数(0为False), 浮点数，列表，元组， 字典默认为True,一个空(&apos;&apos;)默认为False,空列表，元组为False 6. 如果[] or [1] 他默认返回True的， and默认返回false 7. 1 and 2 默认返回大的那个， 1 or 2 返回1(因为他从第一个元素开始检索，只要碰到为真的，那就返回真的那个元素) 字典的成员运算符 字典的成员运算时通过键值对(key-value)中的key来进行运算。]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python数据类型]]></title>
    <url>%2F2017%2F07%2F12%2FPythonBase%2F</url>
    <content type="text"><![CDATA[类型的重要概念 布尔类型属于Number类型。字符串和元组是不可变的， 而列表是可变的。元组中只有一个元素的，等于括号不存在，比如。(“hello”) = “hello”如果想要表示只有一个元素的元组，那么就要这样，比如(1,)多一个逗号。 集合(set)的相关操作1. 集合是无序的，所以不能yong&quot;[0]&quot;这样的操作 2. 集合是不重复的 3. 集合也是可以用len函数来计算长度的 4. 集合可以用&quot;-&quot;来求两个集合的差值， “&amp;”来求交集，&quot;|&quot;求并集 字典的相关操作(key-value键值对是其最基本的概念) 通过key来访问value, 字典不能有相同的key, 如果有，会自动删除前面重复的key以及他的value数字1和字符串1会被识别为两个不同的key 变量和运算符 命名要优雅， 可读性要高系统关键字不能出现在变量名中,比如and, if]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自用atom插件及相关介绍]]></title>
    <url>%2F2017%2F05%2F12%2FatomPackage%2F</url>
    <content type="text"><![CDATA[activate-power-mode 能够让你的代码飞起来！可以像老师写板书一样飞舞粉笔灰(0_0) atom-beautify可以格式化基本上你见过的任何的代码(包括SQL文件) atom-clock就是在编辑器右下角加一个显示时间的东东 atom-bracket-highlight 高亮成对的括号让你不会再找不到另一半! atom-ternjs 补全Node.js代码!补全JQuery代码!补全Angular代码!补全ES6代码段！ atom-djangodjango语法支持，代码段提示 atom-python-run在atom编辑器中运行python代码，而不是命令行中 autocomplete-python-jedipython补全(使用jedi) autoclose-html自动闭合html标签 autocomplete-paths自动补全文件路径 pigments高亮显示对应的颜色RGB minimap不解释！！ minimap-pigments在代码地图中高亮显示RGB颜色 emmet快速生成html代码div.hello (Tab)=&gt; 1&lt;div class="hello"&gt;&lt;/div&gt; highlight-selected高亮显示选择的单词，标签 linter语法检查(可安装对应的检查工具)linter-eslintlinter-csslintlinter-tslint react-snippetsreact代码段提示 platformio-ide-terminal在atom中嵌入一个终端 atom-wx微信语法支持 language-babel支持graphql, jsx等(react开发者必备) json-colorer彩色化json(看起来更直观) regex-railroad-diagram图形化正则表达式(据说很赞，详细使用参见github) MagicPython更好的python语法高亮支持 filesize在编辑器左下角显示当前文件大小]]></content>
      <categories>
        <category>Atom编辑器</category>
      </categories>
      <tags>
        <tag>Editor</tag>
      </tags>
  </entry>
</search>
